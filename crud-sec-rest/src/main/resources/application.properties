#Run Application
#To run the application, first create table in MySQL as given in the example. Now we can run REST web service in following ways.
#1. Using Eclipse: Download the project source code using the download link given at the end of page. Import the project into eclipse. Using command prompt, go to the root folder of the project and run.
#
#mvn clean eclipse:eclipse
#
#and then refresh the project in eclipse. Run Main class MyApplication by clicking Run as -> Java Application. Tomcat server will be started.
#
#2. Using Maven Command: Download the project source code. Go to the root folder of the project using command prompt and run the command.
#
#mvn spring-boot:run
#
#Tomcat server will be started.
#
#3. Using Executable JAR: Using command prompt, go to the root folder of the project and run the command.
#
#mvn clean package
#
#We will get executable JAR spring-boot-demo-0.0.1-SNAPSHOT.jar in target folder. Run this JAR as
#
#java -jar target/spring-boot-demo-0.0.1-SNAPSHOT.jar
#
#Tomcat server will be started
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/crud-sec-rest   
spring.datasource.username=root
spring.datasource.password=

#--------------------------------------------------------------------------------
#                                 Security
#--------------------------------------------------------------------------------
#security.basic.enabled: It enables basic authentication. Default value is true.
#security.basic.path: It configures paths to apply security. We need to provide comma separated paths.
#security.enable-csrf: It enables CSRF. Default value is false.
#security.require-ssl: It enables and disables SSL. Default value is false.
#security.sessions: Default value is stateless. Values can be always, never, if_required, stateless.
#security.user.name: It configures user name. Default user is user.
#security.user.password: It configures password.
#security.user.role: It configures role. Default role is USER.
spring.security.basic.enable=true
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
#                        Default Configuration
#--------------------------------------------------------------------------------

#spring.security.user.name=admin
#spring.security.user.password=admin
debug=true
#----------------------------------------------------------------------------------
#spring.datasource.tomcat.max-wait=20000
#spring.datasource.tomcat.max-active=50
#spring.datasource.tomcat.max-idle=20
#spring.datasource.tomcat.min-idle=15
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.id.new_generator_mappings = false
spring.jpa.properties.hibernate.format_sql = true
logging.level.org.hibernate.SQL=DEBUG

spring.jpa.hibernate.ddl-auto = update
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

#logging.level.org.springframework.boot.autoconfigure.security= INFO
#4. By default static paths are not secured such as /css/**, /js/**, /images/**, /webjars/** and **/favicon.ico.
#5. The features such as HSTS, XSS, CSRF, caching are provided by default in spring
#  security
